{
  "info": {
    "name": "Test Management API Collection",
    "description": "Complete API testing collection for the Test Management System",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set base URL if not set",
          "if (!pm.variables.get('base_url')) {",
          "    pm.variables.set('base_url', 'http://localhost:8000');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "duplicate_test_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Authentication",
      "item": [
        {
          "name": "Create Recruiter User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has user_id', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.variables.set('user_id', jsonData.user_id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Recruiter\",\n  \"email\": \"recruiter@test.com\",\n  \"password\": \"TestPass123!\",\n  \"role\": \"recruiter\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login Recruiter",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access_token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.variables.set('access_token', jsonData.access_token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "recruiter@test.com"
                },
                {
                  "key": "password",
                  "value": "TestPass123!"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Test CRUD Operations",
      "item": [
        {
          "name": "Create Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has test_id', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('test_id');",
                  "    pm.variables.set('test_id', jsonData.test_id);",
                  "});",
                  "",
                  "pm.test('Test name matches', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.test_name).to.eql('Python Developer Assessment');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_name\": \"Python Developer Assessment\",\n  \"job_description\": \"We are looking for a skilled Python developer with experience in FastAPI, SQLAlchemy, and async programming. The ideal candidate should have 3+ years of experience in backend development.\",\n  \"resume_score_threshold\": 70,\n  \"max_shortlisted_candidates\": 50,\n  \"auto_shortlist\": true,\n  \"total_questions\": 25,\n  \"time_limit_minutes\": 90,\n  \"total_marks\": 100,\n  \"scheduled_at\": \"2025-07-09T10:00:00\",\n  \"application_deadline\": \"2025-07-15T23:59:59\",\n  \"assessment_deadline\": \"2025-07-22T23:59:59\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tests/",
              "host": ["{{base_url}}"],
              "path": ["tests", ""]
            }
          }
        },
        {
          "name": "Get All Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/?skip=0&limit=10",
              "host": ["{{base_url}}"],
              "path": ["tests", ""],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get My Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/my-tests",
              "host": ["{{base_url}}"],
              "path": ["tests", "my-tests"]
            }
          }
        },
        {
          "name": "Get Test by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has test_id', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('test_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/{{test_id}}",
              "host": ["{{base_url}}"],
              "path": ["tests", "{{test_id}}"]
            }
          }
        },
        {
          "name": "Update Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Test name updated', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.test_name).to.eql('Updated Python Developer Assessment');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"test_name\": \"Updated Python Developer Assessment\",\n  \"resume_score_threshold\": 75,\n  \"max_shortlisted_candidates\": 40,\n  \"time_limit_minutes\": 120\n}"
            },
            "url": {
              "raw": "{{base_url}}/tests/{{test_id}}",
              "host": ["{{base_url}}"],
              "path": ["tests", "{{test_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Test Lifecycle Management",
      "item": [
        {
          "name": "Schedule Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Test scheduled successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('scheduled');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"scheduled_at\": \"2025-07-09T12:00:00\",\n  \"application_deadline\": \"2025-07-18T23:59:59\",\n  \"assessment_deadline\": \"2025-07-28T23:59:59\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tests/{{test_id}}/schedule",
              "host": ["{{base_url}}"],
              "path": ["tests", "{{test_id}}", "schedule"]
            }
          }
        },
        {
          "name": "Get Test Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/{{test_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["tests", "{{test_id}}", "status"]
            }
          }
        },
        {
          "name": "Publish Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Test published successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('published');",
                  "    pm.expect(jsonData.is_published).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/{{test_id}}/publish",
              "host": ["{{base_url}}"],
              "path": ["tests", "{{test_id}}", "publish"]
            }
          }
        },
        {
          "name": "Get Test Status After Publish",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Test is published', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.is_published).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/{{test_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["tests", "{{test_id}}", "status"]
            }
          }
        },
        {
          "name": "Unpublish Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Test unpublished successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('unpublished');",
                  "    pm.expect(jsonData.is_published).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/{{test_id}}/unpublish",
              "host": ["{{base_url}}"],
              "path": ["tests", "{{test_id}}", "unpublish"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Test Duplication",
      "item": [
        {
          "name": "Duplicate Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has test_id', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('test_id');",
                  "    pm.variables.set('duplicate_test_id', jsonData.test_id);",
                  "});",
                  "",
                  "pm.test('Test name includes (Copy)', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.test_name).to.include('(Copy)');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/{{test_id}}/duplicate",
              "host": ["{{base_url}}"],
              "path": ["tests", "{{test_id}}", "duplicate"]
            }
          }
        },
        {
          "name": "Get All Tests (After Duplication)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Should have at least 2 tests', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.length).to.be.at.least(2);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/",
              "host": ["{{base_url}}"],
              "path": ["tests", ""]
            }
          }
        }
      ]
    },
    {
      "name": "5. Test Deletion",
      "item": [
        {
          "name": "Delete Duplicate Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Test deleted successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/{{duplicate_test_id}}",
              "host": ["{{base_url}}"],
              "path": ["tests", "{{duplicate_test_id}}"]
            }
          }
        },
        {
          "name": "Delete Original Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Test deleted successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/{{test_id}}",
              "host": ["{{base_url}}"],
              "path": ["tests", "{{test_id}}"]
            }
          }
        },
        {
          "name": "Get All Tests (After Deletion)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Should have no tests or fewer tests', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tests/",
              "host": ["{{base_url}}"],
              "path": ["tests", ""]
            }
          }
        }
      ]
    }
  ]
}
