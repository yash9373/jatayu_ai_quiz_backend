"""Initial migration

Revision ID: 9a0e3f9bbc96
Revises: 
Create Date: 2025-07-25 13:30:04.236856

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9a0e3f9bbc96'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_assessments_assessment_id'), table_name='assessments')
    op.drop_table('assessments')
    op.drop_index(op.f('ix_candidate_applications_application_id'), table_name='candidate_applications')
    op.drop_table('candidate_applications')
    op.alter_column('tests', 'job_description',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('tests', 'auto_shortlist',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('tests', 'total_questions',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tests', 'time_limit_minutes',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tests', 'total_marks',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tests', 'is_published',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('tests', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('tests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('tests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('tests', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('tests', 'is_published',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('tests', 'total_marks',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('tests', 'time_limit_minutes',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('tests', 'total_questions',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('tests', 'auto_shortlist',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('tests', 'job_description',
               existing_type=sa.TEXT(),
               nullable=False)
    op.create_table('candidate_applications',
    sa.Column('application_id', sa.INTEGER(), server_default=sa.text("nextval('candidate_applications_application_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('test_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('resume_link', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('resume_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parsed_resume', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resume_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('skill_match_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('experience_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('education_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ai_reasoning', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_shortlisted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('shortlist_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('screening_completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('notified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['test_id'], ['tests.test_id'], name='candidate_applications_test_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='candidate_applications_user_id_fkey'),
    sa.PrimaryKeyConstraint('application_id', name='candidate_applications_pkey'),
    sa.UniqueConstraint('user_id', 'test_id', name='unique_user_test_application', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_candidate_applications_application_id'), 'candidate_applications', ['application_id'], unique=False)
    op.create_table('assessments',
    sa.Column('assessment_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('test_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('questions_answered', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_questions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('current_question_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_possible_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('percentage_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('time_taken_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time_limit_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('answers_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('skill_assessment_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['application_id'], ['candidate_applications.application_id'], name=op.f('assessments_application_id_fkey')),
    sa.ForeignKeyConstraint(['test_id'], ['tests.test_id'], name=op.f('assessments_test_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('assessments_user_id_fkey')),
    sa.PrimaryKeyConstraint('assessment_id', name=op.f('assessments_pkey'))
    )
    op.create_index(op.f('ix_assessments_assessment_id'), 'assessments', ['assessment_id'], unique=False)
    # ### end Alembic commands ###
