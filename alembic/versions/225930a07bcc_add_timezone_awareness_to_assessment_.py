"""add_timezone_awareness_to_assessment_datetimes

Revision ID: 225930a07bcc
Revises: 00c2f678c131
Create Date: 2025-07-29 14:26:16.551377

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '225930a07bcc'
down_revision: Union[str, Sequence[str], None] = '00c2f678c131'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('logs')

    # Convert existing timezone-naive datetimes to UTC timezone-aware datetimes
    # This assumes existing data is in UTC (which is typically the case for utcnow() data)

    # Update start_time column
    op.alter_column('assessments', 'start_time',
                    existing_type=postgresql.TIMESTAMP(),
                    type_=sa.DateTime(timezone=True),
                    existing_nullable=True)
    op.execute(
        "UPDATE assessments SET start_time = start_time AT TIME ZONE 'UTC' WHERE start_time IS NOT NULL")

    # Update end_time column
    op.alter_column('assessments', 'end_time',
                    existing_type=postgresql.TIMESTAMP(),
                    type_=sa.DateTime(timezone=True),
                    existing_nullable=True)
    op.execute(
        "UPDATE assessments SET end_time = end_time AT TIME ZONE 'UTC' WHERE end_time IS NOT NULL")

    # Update created_at column
    op.alter_column('assessments', 'created_at',
                    existing_type=postgresql.TIMESTAMP(),
                    type_=sa.DateTime(timezone=True),
                    existing_nullable=True)
    op.execute(
        "UPDATE assessments SET created_at = created_at AT TIME ZONE 'UTC' WHERE created_at IS NOT NULL")

    # Update updated_at column
    op.alter_column('assessments', 'updated_at',
                    existing_type=postgresql.TIMESTAMP(),
                    type_=sa.DateTime(timezone=True),
                    existing_nullable=True)
    op.execute(
        "UPDATE assessments SET updated_at = updated_at AT TIME ZONE 'UTC' WHERE updated_at IS NOT NULL")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('assessments', 'updated_at',
                    existing_type=sa.DateTime(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=True)
    op.alter_column('assessments', 'created_at',
                    existing_type=sa.DateTime(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=True)
    op.alter_column('assessments', 'end_time',
                    existing_type=sa.DateTime(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=True)
    op.alter_column('assessments', 'start_time',
                    existing_type=sa.DateTime(timezone=True),
                    type_=postgresql.TIMESTAMP(),
                    existing_nullable=True)
    op.create_table('logs',
                    sa.Column('id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text(
                        'now()'), autoincrement=False, nullable=False),
                    sa.Column('action', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=False),
                    sa.Column('status', sa.VARCHAR(length=50),
                              autoincrement=False, nullable=False),
                    sa.Column('details', sa.TEXT(),
                              autoincrement=False, nullable=True),
                    sa.Column('user', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('entity', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('source', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('logs_pkey'))
                    )
    # ### end Alembic commands ###
